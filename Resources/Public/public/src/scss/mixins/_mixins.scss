// Inlineblock
@mixin inline-block() {
  *display: inline;
  display: inline-block;
  vertical-align: top;
  zoom: 1;
}

@mixin absoluted-fullwidth {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

@mixin bg-img {
  background-position: center center;
  background-repeat: no-repeat;
  background-size: cover;
}

// Placeholder mixin
@mixin placeholder($color) {
  ::placeholder {
    color: $color;
  }
}

// ----------------------------------------------------------------------
// Transitions
// ----------------------------------------------------------------------
// example: @include single-transition(background, 1s, ease-in-out, 0);

@mixin transition($property, $duration, $timing-function, $delay) {
  transition: $property $duration $timing-function $delay;
}

@mixin user-select() {
  user-select: none;
}

// generic transform
@mixin transform($transforms...) {
  transform: $transforms;
}

// rotate
@mixin rotate($deg) {
  @include transform(rotate($deg));
}

// scale
@mixin scale($scale) {
  @include transform(scale($scale));
}

// translate
@mixin translate($x, $y) {
  @include transform(translate($x, $y));
}

// translate
@mixin translate3d($x, $y, $z) {
  @include transform(translate3d($x, $y, $z));
}

// skew
@mixin skew($x, $y) {
  @include transform(skew(#{$x}deg, #{$y}deg));
}

//transform origin
@mixin transform-origin($origin) {
  transform-origin: $origin;
}

//Border radius
@mixin border-radius($radius) {
  border-radius: $radius;
}

@mixin box-shadow($input) {
  box-shadow: $input;
}

@mixin columns($num, $gap) {
  column-count: $num;
  column-gap: $gap;
}

// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
  display: flex;
}

@mixin inline-flexbox() {
  display: inline-flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number>
@mixin flex-shrink($shrink) {
  flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width>
@mixin flex-basis($width) {
  flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around
@mixin justify-content($justify) {
  justify-content: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch
@mixin align-content($align) {
  align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch
@mixin align-items($align) {
  align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch
@mixin align-self($align) {
  align-self: $align;
}

// Alignments
@mixin vertical-align($position: relative) {
  position: $position;
  top: 50%;
  transform: translateY(-50%);
}

@mixin horizontal-align() {
  left: 50%;
  transform: translateX(-50%);
}

@mixin horizontal-vertical-align($position: relative) {
  @include translate(-50%, -50%);
  left: 50%;
  position: $position;
  top: 50%;
}

@mixin abs-position($top, $right, $bottom, $left) {
  bottom: $bottom;
  left: $left;
  position: absolute;
  right: $right;
  top: $top;
}

/**************************************************************************
* SVG Icon dynamic color functions IE supported
***************************************************************************/
// functions to urlencode the svg string
@function str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}
@function url-encode($string) {
  $map: (
    '%': '%25',
    '<': '%3C',
    '>': '%3E',
    ' ': '%20',
    '!': '%21',
    '*': '%2A',
    "'": '%27',
    '"': '%22',
    '(': '%28',
    ')': '%29',
    ';': '%3B',
    ':': '%3A',
    '@': '%40',
    '&': '%26',
    '=': '%3D',
    '+': '%2B',
    '$': '%24',
    ',': '%2C',
    '/': '%2F',
    '?': '%3F',
    '#': '%23',
    '[': '%5B',
    ']': '%5D'
  );
  $new: $string;
  @each $search, $replace in $map {
    $new: str-replace($new, $search, $replace);
  }
  @return $new;
}
// Function define
@function inline-svg($string) {
  @return url('data:image/svg+xml;charset=US-ASCII,#{url-encode($string)}');
}

// Include SVG Image
@mixin calendar-icon($color: $primary-color) {
  background-image: inline-svg('<svg xmlns="http://www.w3.org/2000/svg" width="15.5" height="15.5"><path data-name="calendar (2)" d="M13.563 1.938h-.646V.646A.646.646 0 0 0 12.271 0h-.646a.646.646 0 0 0-.646.646v1.292H4.521V.646A.646.646 0 0 0 3.875 0h-.646a.646.646 0 0 0-.646.646v1.292h-.645A1.94 1.94 0 0 0 0 3.875v9.688A1.94 1.94 0 0 0 1.938 15.5h11.625a1.94 1.94 0 0 0 1.937-1.937V3.875a1.94 1.94 0 0 0-1.937-1.937Zm.646 11.625a.647.647 0 0 1-.646.646H1.938a.647.647 0 0 1-.646-.646V6.484h12.916Zm0 0" fill="'+ $color +'"/></svg>');
}

@mixin arrow($color: $primary-color) {
  background-image: inline-svg('<svg xmlns="http://www.w3.org/2000/svg" width="13.999" height="12.001"><path data-name="Path 15380" d="m13.706 6.707-5 5a.986.986 0 0 1-.706.294 1 1 0 0 1-.707-.293 1 1 0 0 1 0-1.414l3.294-3.293H1a1 1 0 0 1-1-1 1 1 0 0 1 1-1h9.587L7.294 1.707a1 1 0 0 1 0-1.414 1 1 0 0 1 1.414 0l5 5a1 1 0 0 1-.002 1.414Z" fill="'+ $color +'"/></svg>');
}

@mixin location($color: $primary-color) {
  background-image: inline-svg('<svg xmlns="http://www.w3.org/2000/svg" width="12.78" height="17.31"><path data-name="Path 15301" d="M6.39 0A6.519 6.519 0 0 0 0 6.626a6.813 6.813 0 0 0 .862 3.325 6.679 6.679 0 0 0 .437.679l4.814 6.679h.555l4.814-6.679a6.692 6.692 0 0 0 .437-.679 6.813 6.813 0 0 0 .862-3.325A6.519 6.519 0 0 0 6.39 0Zm0 8.824a2.162 2.162 0 0 1-2.119-2.2 2.121 2.121 0 1 1 4.238 0 2.162 2.162 0 0 1-2.119 2.2Z" fill="'+ $color +'"/></svg>');
}

@mixin watch($color: $primary-color) {
  background-image: inline-svg('<svg xmlns="http://www.w3.org/2000/svg" width="14.33" height="14.33"><path data-name="Path 15302" d="M7.165 14.33A7.165 7.165 0 1 0 0 7.165a7.166 7.166 0 0 0 7.165 7.165ZM6.653 3.071a.512.512 0 1 1 1.024 0v3.848l2.367 1.894a.512.512 0 0 1-.32.911.5.5 0 0 1-.32-.113L6.845 7.564a.514.514 0 0 1-.192-.4V3.071Z" fill="'+ $color +'"/></svg>');
}

@mixin next($color: $primary-color) {
  background-image: inline-svg('<svg xmlns="http://www.w3.org/2000/svg" width="16.5" height="12"><path data-name="next (3)" d="M16.281 5.47 11.03.22a.75.75 0 1 0-1.06 1.06l3.97 3.97H.75a.75.75 0 1 0 0 1.5h13.19l-3.97 3.97a.75.75 0 1 0 1.061 1.061l5.25-5.25a.75.75 0 0 0 0-1.061Z" fill="'+ $color +'"/></svg>');
}
